# Generated by Django 4.2 on 2024-12-16 05:13

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Mahsulot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mahsulot_nomi', models.CharField(max_length=255, unique=True, verbose_name='Mahsulot nomi')),
            ],
            options={
                'verbose_name': 'Mahsulot',
                'verbose_name_plural': 'Mahsulotlar',
            },
        ),
        migrations.CreateModel(
            name='OlchovBirligi',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('olchov_birligi', models.CharField(max_length=255, unique=True, verbose_name="O'lchov birligi")),
            ],
            options={
                'verbose_name': "O'lchov Birlig",
                'verbose_name_plural': "O'lchov Birliglar",
            },
        ),
        migrations.CreateModel(
            name='MahsulotBalansTarix',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('miqdor', models.PositiveIntegerField(verbose_name='Miqdor')),
                ('qoldiq', models.PositiveIntegerField(verbose_name='Qoldiq')),
                ('sana', models.DateTimeField(verbose_name='Sana')),
                ('amaliyot_turi', models.CharField(max_length=5, verbose_name='Amaliyot turi')),
                ('mahsulot_nomi', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ombor.mahsulot', verbose_name='Mahsulot nomi')),
            ],
            options={
                'verbose_name': 'Mahsulot Balans Tarixi',
                'verbose_name_plural': 'Mahsulot Balans Tarixi',
            },
        ),
        migrations.CreateModel(
            name='MahsulotBalans',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qoldiq', models.PositiveIntegerField(default=0, verbose_name='Qoldiq')),
                ('mahsulot_nomi', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ombor.mahsulot', verbose_name='Mahsulot nomi')),
            ],
            options={
                'verbose_name': 'Mahsulot Joriy Balansi',
                'verbose_name_plural': 'Mahsulot Joriy Balansi',
            },
        ),
        migrations.AddField(
            model_name='mahsulot',
            name='olchov_birligi',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ombor.olchovbirligi', verbose_name="O'lchov birligi"),
        ),
        migrations.CreateModel(
            name='KirdiChiqdi',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('miqdor', models.PositiveIntegerField(default=0, verbose_name='Miqdor')),
                ('sana', models.DateTimeField(auto_now_add=True, verbose_name='Sana')),
                ('amaliyot_turi', models.CharField(choices=[('Kirdi', 'Kirdi'), ('Chiqdi', 'Chiqdi')], max_length=15, verbose_name='Amaliyot turi')),
                ('mahsulot_nomi', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='ombor.mahsulot', verbose_name='Mahsulot nomi')),
            ],
            options={
                'verbose_name': 'Kirdi Chiqdi',
                'verbose_name_plural': 'Kirdi Chiqdi',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profile_images/', verbose_name='Foydalanuvchi rasmi')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
